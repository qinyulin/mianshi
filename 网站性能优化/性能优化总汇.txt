一、页面级优化
1、减少http请求数
	完整的请求都需要经过 DNS寻址、与服务器建立连接、发送数据、等待服务器响应、接收数据这样一个 “漫长” 而复杂的过程。由于浏览器进行并发请求的请求数是有上限的 (具体参见此处 )，因此请求数多了以后，浏览器需要分批进行请求，因此会增加用户的等待时间。
	解决方案：
	(1). 从设计实现层面简化页面
	(2). 合理设置 HTTP缓存
	(3). 资源合并与压缩
	(4). CSS Sprites
	(5). Inline Images（用位图方式）
	(6). Lazy Load Images（懒加载图片）
2. 将外部脚本置底
3. 异步执行 inline脚本(其实原理和上面是一样，保证脚本在页面内容后面加载。)
4. Lazy Load Javascript（只有在需要加载的时候加载，在一般情况下并不加载信息内容。）
5. 将 CSS放在 HEAD中，先加载样式表，等dom渲染完就可以直接上样式。
6. 异步请求 Callback

二、代码级优化
1. Javascript
	(1). DOM：简单的说就是dom操作是需要消耗性能，需要遍历 HTML Collection的时候，尽量将它转为数组后再访问，以提高性能。即使不转换为数组，也请尽可能少的访问它，例如在遍历的时候可以将 length属性、成员保存到局部变量后再使用局部变量。
	还要注意Reflow & Repaint；
	(2). 避免使用 eval和 Function
	(3). 减少作用域链查找
	(4). 字符串拼接
		在 Javascript中使用"+" 号来拼接字符串效率是比较低的，与之相比更为高效的做法是使用数组的 join方法。
2. CSS选择符
	简单的说实际上浏览器对选择符的解析是从右往左进行的。这里还需要着重去查一下资料。
3. Image压缩
	涉及到静态图片、雪碧图，还有自动化工具对图片的处理，可以详细展开分析。

三、服务器方面
1、负载均衡
	nginx + tomcat集群，使用haship负载均衡方案可以避免sesson丢失。
	因为使用负载均衡，上传文件不要直接上传到tomcat目录下，可以通过ftp统一上传到单独的文件服务器。使用nginx的反向代理，对静态资源的请求直接nginx处理，其他转发给tomcat处理。